/*
Deployment script for SomarAccountancyEmil

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SomarAccountancyEmil"
:setvar DefaultFilePrefix "SomarAccountancyEmil"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [Accounting].[Offline].[AccountId] is being dropped, data loss could occur.

The column [Accounting].[Offline].[FromWarehouseId] is being dropped, data loss could occur.

The column [Accounting].[Offline].[IncludeDate] is being dropped, data loss could occur.

The column [Accounting].[Offline].[IsFiltered] is being dropped, data loss could occur.

The column [Accounting].[Offline].[PaymentDate] is being dropped, data loss could occur.

The column [Accounting].[Offline].[SaleNo] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [Accounting].[Offline])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [Accounting].[OfflineDetail].[AccountId] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[AmountBuy] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[AmountRetail] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[AmountWholeSale] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[CostDeficit] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[CostInclude] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[DateOfProduction] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[Deficit] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[DiscountNumber] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[DiscountNumberDeficit] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[DocumentId] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[LastExpirationDate] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[Payment] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[PaymentId] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[Percent] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[PriceBuy] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[PriceRetail] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[PriceWholeSale] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[Series] is being dropped, data loss could occur.

The column [Accounting].[OfflineDetail].[TotalId] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [Accounting].[OfflineDetail])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping unnamed constraint on [Accounting].[Offline]...';


GO
ALTER TABLE [Accounting].[Offline] DROP CONSTRAINT [DF__Offline__Include__185783AC];


GO
PRINT N'Dropping unnamed constraint on [Accounting].[Offline]...';


GO
ALTER TABLE [Accounting].[Offline] DROP CONSTRAINT [DF__Offline__CreateD__194BA7E5];


GO
PRINT N'Dropping unnamed constraint on [Accounting].[OfflineDetail]...';


GO
ALTER TABLE [Accounting].[OfflineDetail] DROP CONSTRAINT [DF__tmp_ms_xx__IsAct__24BD5A91];


GO
PRINT N'Dropping unnamed constraint on [Accounting].[OfflineDetail]...';


GO
ALTER TABLE [Accounting].[OfflineDetail] DROP CONSTRAINT [DF__tmp_ms_xx__Creat__25B17ECA];


GO
PRINT N'Starting rebuilding table [Accounting].[Offline]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Accounting].[tmp_ms_xx_Offline] (
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [Driver]          NVARCHAR (200) NULL,
    [Fin]             NVARCHAR (200) NULL,
    [CompanyId]       INT            NULL,
    [WareHouseId]     INT            NULL,
    [ContractId]      INT            NULL,
    [PaymentTypeId]   INT            NULL,
    [Transportation]  NVARCHAR (200) NULL,
    [Cart]            NVARCHAR (200) NULL,
    [Sender]          NVARCHAR (200) NULL,
    [SenderAddress]   NVARCHAR (200) NULL,
    [SenderManager]   NVARCHAR (200) NULL,
    [Received]        NVARCHAR (200) NULL,
    [ReceivedAddress] NVARCHAR (200) NULL,
    [ReceivedManager] NVARCHAR (200) NULL,
    [Date]            DATETIME       NULL,
    [DeliveryDate]    DATETIME       NULL,
    [Description]     NVARCHAR (500) NULL,
    [CreateId]        INT            NULL,
    [CreateDate]      DATETIME       DEFAULT getdate() NULL,
    [UpdateId]        INT            NULL,
    [UpdateDate]      DATETIME       NULL,
    [DeleteId]        INT            NULL,
    [DeleteDate]      DATETIME       NULL,
    [ReadOnly]        DATETIME       NULL,
    [DocTypeId]       INT            NULL,
    [DocCertId]       INT            NULL,
    [DocSeriesId]     INT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PKOffline1] PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Accounting].[Offline])
    BEGIN
        SET IDENTITY_INSERT [Accounting].[tmp_ms_xx_Offline] ON;
        INSERT INTO [Accounting].[tmp_ms_xx_Offline] ([Id], [CompanyId], [ContractId], [WareHouseId], [PaymentTypeId], [Description], [CreateId], [CreateDate], [UpdateId], [UpdateDate], [DeleteId], [DeleteDate], [ReadOnly], [DocTypeId], [DocCertId], [DocSeriesId])
        SELECT   [Id],
                 [CompanyId],
                 [ContractId],
                 [WareHouseId],
                 [PaymentTypeId],
                 [Description],
                 [CreateId],
                 [CreateDate],
                 [UpdateId],
                 [UpdateDate],
                 [DeleteId],
                 [DeleteDate],
                 [ReadOnly],
                 [DocTypeId],
                 [DocCertId],
                 [DocSeriesId]
        FROM     [Accounting].[Offline]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [Accounting].[tmp_ms_xx_Offline] OFF;
    END

DROP TABLE [Accounting].[Offline];

EXECUTE sp_rename N'[Accounting].[tmp_ms_xx_Offline]', N'Offline';

EXECUTE sp_rename N'[Accounting].[tmp_ms_xx_constraint_PKOffline1]', N'PKOffline', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [Accounting].[OfflineDetail]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Accounting].[tmp_ms_xx_OfflineDetail] (
    [Id]          INT             IDENTITY (1, 1) NOT NULL,
    [LogisticId]  INT             NULL,
    [BarcodeId]   INT             NULL,
    [GoodId]      INT             NULL,
    [Quantity]    DECIMAL (26, 6) NULL,
    [UnitId]      INT             NULL,
    [Description] NVARCHAR (500)  NULL,
    [IsActive]    BIT             DEFAULT 1 NOT NULL,
    [SaleNo]      INT             NULL,
    [CreateId]    INT             NULL,
    [CreateDate]  DATETIME        DEFAULT getdate() NULL,
    [UpdateId]    INT             NULL,
    [UpdateDate]  DATETIME        NULL,
    [DeleteId]    INT             NULL,
    [DeleteDate]  DATETIME        NULL,
    [ReadOnly]    DATETIME        NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PKOfflineDetail1] PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Accounting].[OfflineDetail])
    BEGIN
        SET IDENTITY_INSERT [Accounting].[tmp_ms_xx_OfflineDetail] ON;
        INSERT INTO [Accounting].[tmp_ms_xx_OfflineDetail] ([Id], [BarcodeId], [GoodId], [Quantity], [UnitId], [Description], [IsActive], [SaleNo], [CreateId], [CreateDate], [UpdateId], [UpdateDate], [DeleteId], [DeleteDate], [ReadOnly])
        SELECT   [Id],
                 [BarcodeId],
                 [GoodId],
                 [Quantity],
                 [UnitId],
                 [Description],
                 [IsActive],
                 [SaleNo],
                 [CreateId],
                 [CreateDate],
                 [UpdateId],
                 [UpdateDate],
                 [DeleteId],
                 [DeleteDate],
                 [ReadOnly]
        FROM     [Accounting].[OfflineDetail]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [Accounting].[tmp_ms_xx_OfflineDetail] OFF;
    END

DROP TABLE [Accounting].[OfflineDetail];

EXECUTE sp_rename N'[Accounting].[tmp_ms_xx_OfflineDetail]', N'OfflineDetail';

EXECUTE sp_rename N'[Accounting].[tmp_ms_xx_constraint_PKOfflineDetail1]', N'PKOfflineDetail', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [Accounting].[VwBank]...';


GO
ALTER VIEW [Accounting].[VwBank]
with encryption
	AS 
	select 
	   b.[Id]
      ,b.[GroupId]
	  ,bg.Name BankGroupName
      ,b.[Name]
      ,b.[Swift]
	  ,b.[Voen]
      ,b.[CurrencyId]
	  ,C.Name CurrencyName
	  ,b.[RegionId]
	  ,r.Name  RegionName
      ,b.[CreateId]
      ,b.[CreateDate]
      ,b.[UpdateId]
      ,b.[UpdateDate]
      ,b.[DeleteId]
      ,b.[DeleteDate]
      ,b.[ReadOnly]
      ,b.[DocTypeId]
      ,b.[DocCertId]
      ,b.[DocSeriesId]
from [Accounting].[Bank] b

left  join [Accounting].[BankGroup] bg on b.GroupId=bg.Id
left join [Accounting].[Currency] c on b.CurrencyId=c.Id
left join [dbo].[Region] r on b.RegionId=r.Id
GO
PRINT N'Altering [Accounting].[VwBankChoose]...';


GO
ALTER VIEW [Accounting].[VwBankChoose]
with encryption
	AS 
	select b.[Id]
      ,b.[Name]
	  ,b.[Voen]
	  ,b.[Swift]
      ,b.[DocTypeId]
      ,b.[DocCertId]
      ,b.[DocSeriesId]
from [Accounting].[Bank] b
where DeleteId is null
GO
PRINT N'Altering [Accounting].[VwBankGroup]...';


GO
ALTER VIEW [Accounting].[VwBankGroup]
with encryption
	AS SELECT * FROM [Accounting].[BankGroup]
GO
PRINT N'Altering [Accounting].[VwBankGroupChoose]...';


GO
ALTER VIEW [Accounting].[VwBankGroupChoose]
with encryption
	AS SELECT Id,[Name] FROM [Accounting].[BankGroup] where nullif(IsActive,1) is null
GO
PRINT N'Altering [Accounting].[VwCurrency]...';


GO
ALTER VIEW [Accounting].[VwCurrency]
with encryption
	AS SELECT [Id],[Name],isnull([Buy],1) [Buy],isnull([Sell],1) [Sell],isnull([RefreshDate],'20000101') [RefreshDate],[Description],[IsActive]
	FROM [Accounting].[Currency]
GO
PRINT N'Altering [Accounting].[VwCurrencyChoose]...';


GO
ALTER VIEW [Accounting].[VwCurrencyChoose]
with encryption
	AS SELECT Id,[Name] FROM [Accounting].[Currency] where nullif(IsActive,1) is null
GO
PRINT N'Altering [Accounting].[VwGoodType]...';


GO
ALTER VIEW [Accounting].[VwGoodType]
with encryption
	AS SELECT * FROM [Accounting].[GoodType]
GO
PRINT N'Altering [Accounting].[VwGoodTypeChoose]...';


GO
ALTER VIEW [Accounting].[VwGoodTypeChoose]
with encryption
	AS SELECT Id,[Name] FROM [Accounting].[GoodType] where nullif(IsActive,1) is null
GO
PRINT N'Altering [Accounting].[VwReason]...';


GO
ALTER VIEW [Accounting].[VwReason]
with encryption
	AS SELECT * FROM [Accounting].Reason
GO
PRINT N'Altering [dbo].[VwDepartment]...';


GO
ALTER VIEW [dbo].[VwDepartment]
with encryption
	AS SELECT * FROM [dbo].[Department]
GO
PRINT N'Altering [dbo].[VwDepartmentChoose]...';


GO
ALTER VIEW [dbo].[VwDepartmentChoose]
with encryption
	AS SELECT Id,[Name] FROM [dbo].[Department] where nullif(IsActive,1) is null
GO
PRINT N'Altering [dbo].[VwDocCert]...';


GO
ALTER VIEW [dbo].[VwDocCert]
with encryption
AS SELECT * FROM [dbo].[DocCert]
GO
PRINT N'Altering [dbo].[VwDocCertChoose]...';


GO
ALTER VIEW [dbo].[VwDocCertChoose]
with encryption
AS SELECT Id,[Name] FROM [dbo].[DocCert] where nullif(IsActive,1) is null
GO
PRINT N'Altering [dbo].[VwDocSeries]...';


GO
ALTER VIEW [dbo].[VwDocSeries]
with encryption
AS SELECT * FROM [dbo].[DocSeries]
GO
PRINT N'Altering [dbo].[VwDocSeriesChoose]...';


GO
ALTER VIEW [dbo].[VwDocSeriesChoose]
with encryption
AS SELECT Id,[Name] FROM [dbo].[DocSeries] where nullif(IsActive,1) is null
GO
PRINT N'Altering [dbo].[VwDocType]...';


GO
ALTER VIEW [dbo].[VwDocType]
with encryption
AS SELECT * FROM [dbo].[DocType]
GO
PRINT N'Altering [dbo].[VwDocTypeChoose]...';


GO
ALTER VIEW [dbo].[VwDocTypeChoose]
with encryption
AS SELECT Id,[Name] FROM [dbo].[DocType] where nullif(IsActive,1) is null
GO
PRINT N'Altering [dbo].[VwPosition]...';


GO
ALTER VIEW [dbo].[VwPosition]
with encryption
	AS SELECT * FROM [dbo].[Position]
GO
PRINT N'Altering [dbo].[VwPositionChoose]...';


GO
ALTER VIEW [dbo].[VwPositionChoose]
with encryption
	AS SELECT Id,[Name] FROM [dbo].[Position] where nullif(IsActive,1) is null
GO
PRINT N'Altering [dbo].[VwUnitChoose]...';


GO
ALTER VIEW [dbo].[VwUnitChoose]
with encryption

	AS SELECT Id,[Name],[Description] FROM [dbo].[Unit]

where nullif (IsActive,1) IS NULL
GO
PRINT N'Altering [dbo].[VwWorkGraphic]...';


GO
ALTER VIEW [dbo].[VwWorkGraphic]
with encryption
AS SELECT * FROM [dbo].[WorkGraphic]
GO
PRINT N'Altering [dbo].[VwWorkGraphicChoose]...';


GO
ALTER VIEW [dbo].[VwWorkGraphicChoose]
with encryption
AS SELECT Id,[Name] FROM [dbo].[WorkGraphic] where nullif(IsActive,1) is null
GO
PRINT N'Altering [WareHouses].[VwWareHouse]...';


GO
ALTER VIEW [WareHouses].[VwWareHouse]
with encryption
	AS SELECT 
	
	 wh.[Id],
	 wh.CompanyId,
	 c.CompanyName
	,wh.[Name]
	,wh.[WareHouseTypeId]
	,wh.[Description]
	,wh.[IsActive]
	,wht.Name WareHouseTypeName
	FROM [WareHouses].[WareHouse] wh

	left join WareHouses.WareHouseType  wht on wh.WareHouseTypeId= wht.Id
	LEFT JOIN Accounting.Company c ON  c.Id=wh.CompanyId
	--where wh.Id=1;
GO
PRINT N'Refreshing [Accounting].[VwInventar]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwInventar]';


GO
PRINT N'Altering [WareHouses].[VwWareHouseChoose]...';


GO
ALTER VIEW [WareHouses].[VwWareHouseChoose]
with encryption
	AS SELECT Id,[Name] FROM [WareHouses].[WareHouse] where nullif(IsActive,1) is null
GO
PRINT N'Altering [WareHouses].[VwWareHouseType]...';


GO
ALTER VIEW [WareHouses].[VwWareHouseType]
with encryption
	AS SELECT * FROM [WareHouses].[WareHouseType]
	WHERE isnull (IsActive,1)= 1;
GO
PRINT N'Refreshing [Accounting].[VwCompany]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwCompany]';


GO
PRINT N'Refreshing [Accounting].[VwCompanyMain]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwCompanyMain]';


GO
PRINT N'Refreshing [Accounting].[VwCustomer]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwCustomer]';


GO
PRINT N'Refreshing [Accounting].[VwContract]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwContract]';


GO
PRINT N'Refreshing [Accounting].[VwDocument]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwDocument]';


GO
PRINT N'Refreshing [Accounting].[VwDocumentDeletion]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwDocumentDeletion]';


GO
PRINT N'Refreshing [Accounting].[VwDocumentRetailsSale]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwDocumentRetailsSale]';


GO
PRINT N'Refreshing [Accounting].[VwDocumentReturnInclude]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwDocumentReturnInclude]';


GO
PRINT N'Refreshing [Accounting].[VwDocumentReturnRetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwDocumentReturnRetail]';


GO
PRINT N'Refreshing [Accounting].[VwDocumentReturnSale]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwDocumentReturnSale]';


GO
PRINT N'Refreshing [Accounting].[VwDocumentTmp]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwDocumentTmp]';


GO
PRINT N'Refreshing [Accounting].[VwGood]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwGood]';


GO
PRINT N'Refreshing [Accounting].[VwGoodSelect]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwGoodSelect]';


GO
PRINT N'Altering [Accounting].[VwOffline]...';


GO
ALTER VIEW [Accounting].[VwOffline] 
	AS SELECT 

	     l.[Id]  
		,l.[Driver]  
		,l.[Fin]  
		,l.[Transportation]  
		,l.[Cart]  
		,l.[Sender]  
		,l.[SenderAddress]  
		,l.[SenderManager]  
		,l.[Received]  
		,l.[ReceivedAddress]  
		,l.[ReceivedManager]  
		,l.[Date] 
		,l.[DeliveryDate] 
		,l.[Description]  
		,l.WareHouseId
		,l.CompanyId
		,wv.[Name] as WareHouseName
		,c.CompanyName
			,l.ContractId
	,co.CustomerId
	,co.CustomerName
	
	,l.[PaymentTypeId]
	,pt.[Name] PaymentTypeName
	
	FROM [Accounting].[Offline] l
	left join WareHouses.WareHouse  wv on wv.Id=l.WareHouseId
	left join Accounting.Company c on c.Id=l.CompanyId
		left join Accounting.VwContract co on l.ContractId=co.Id 
	left join Accounting.VwPaymentType pt on l.PaymentTypeId=pt.Id
GO
PRINT N'Refreshing [Accounting].[VwLogistic]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwLogistic]';


GO
PRINT N'Refreshing [Accounting].[VwDeficitGoodStock]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwDeficitGoodStock]';


GO
PRINT N'Refreshing [Accounting].[VwGoodStock]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwGoodStock]';


GO
PRINT N'Refreshing [Accounting].[VwBarcode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwBarcode]';


GO
PRINT N'Refreshing [Accounting].[VwBarcodeSelect]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwBarcodeSelect]';


GO
PRINT N'Refreshing [Accounting].[VwDocumentDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwDocumentDetail]';


GO
PRINT N'Refreshing [Accounting].[VwDocumentDetailTmp]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwDocumentDetailTmp]';


GO
PRINT N'Refreshing [Accounting].[VwLogisticDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwLogisticDetail]';


GO
PRINT N'Altering [Accounting].[VwOfflineDetail]...';


GO
ALTER VIEW [Accounting].[VwOfflineDetail]
	AS SELECT
 
	
	 ld.[Id]  
	,ld.[BarcodeId]   
	,ld.[LogisticId]  
    ,ld.[GoodId]  
	,g.Id LogGoodId
	,g.FullGoodName
	,ld.[Quantity]  
	,ld.[UnitId]  
	,u.Name
	,ld.[Description]  
	FROM [Accounting].OfflineDetail ld


	left join [Accounting].[VwGood] g on ld.GoodId=g.Id 
	left join [dbo].[Unit] u on ld.UnitId=u.Id
GO
PRINT N'Refreshing [Accounting].[VwRetailReceipt]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwRetailReceipt]';


GO
PRINT N'Refreshing [Accounting].[VwRetailSale]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwRetailSale]';


GO
PRINT N'Refreshing [Accounting].[VwLastPrice]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwLastPrice]';


GO
PRINT N'Refreshing [Accounting].[VwRetailPrint]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwRetailPrint]';


GO
PRINT N'Refreshing [Accounting].[VwRetailReceiptHistory]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[VwRetailReceiptHistory]';


GO
PRINT N'Refreshing [Accounting].[IFnDocumentDetailReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[IFnDocumentDetailReport]';


GO
PRINT N'Refreshing [Accounting].[IFnLogisticDetailReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[IFnLogisticDetailReport]';


GO
PRINT N'Refreshing [Accounting].[IFnDeleteGood]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[IFnDeleteGood]';


GO
PRINT N'Refreshing [Accounting].[IFnIncludeGood]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[IFnIncludeGood]';


GO
PRINT N'Refreshing [Accounting].[IFnRetailsSaleGood]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[IFnRetailsSaleGood]';


GO
PRINT N'Refreshing [Accounting].[IFnReturnRetailSaleGood]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[IFnReturnRetailSaleGood]';


GO
PRINT N'Refreshing [Accounting].[IFnReturnSaleGood]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[IFnReturnSaleGood]';


GO
PRINT N'Refreshing [Accounting].[IFnSaleGood]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[IFnSaleGood]';


GO
PRINT N'Altering [Accounting].[spOfflineDocument]...';


GO
 
ALTER PROCEDURE [Accounting].[spOfflineDocument]
@userId int,
@operationType tinyint,
@id int=null,
@driver nvarchar(200) =null,
@fin nvarchar(200)=null,
@transportation nvarchar(200)=null,
@cart nvarchar(200)=null,
@sender nvarchar(200)=null,
@senderAddress nvarchar(200)=null,
@senderManager nvarchar(200)=null,
@received nvarchar(200)=null,
@receivedAddress nvarchar(200)=null,
@receivedManager nvarchar(200)=null,
@date datetime =null,
@deliveryDate datetime=null,
@description nvarchar(500)=null,
@docTypeId INT =null,
@docCertId int =null,
@docSeriesId int =null,
	@companyId INT=NULL,
	@wareHouseId INT=NULL,
		@paymentTypeId int=null,
	@contractId int =null,
	@customerId int=null,
@details [Accounting].[UddtLogisticDetail]  readonly 


with encryption
AS 
begin
set xact_abort on;
if @operationType in (1,11)
goto spAdd;
--else if @operationType in (2,12)
--goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;

spAdd:
begin
begin transaction
insert into [Accounting].[Offline]([Driver],[Fin],[Transportation],[Cart],[Sender],[SenderAddress]
,[SenderManager],[Received],[ReceivedAddress],[ReceivedManager],[Date],[DeliveryDate],[Description],[CreateId],[DocTypeId],[DocCertId],[DocSeriesId],[CompanyId],[WareHouseId],[PaymentTypeId],[ContractId])


VALUES (@driver,@fin,@transportation,@cart,@sender,@senderAddress,@senderManager,@received,@receivedAddress,@receivedManager,@date,@deliveryDate
,@description,@userId,@docTypeId,@docCertId,@docSeriesId,@companyId,@wareHouseId,@paymentTypeId,@contractId);

 set @id=SCOPE_IDENTITY();

 insert into [Accounting].[OfflineDetail]([LogisticId],[BarcodeId],[GoodId],[Quantity],[UnitId],[Description])
                                    select @id,[BarcodeId],[GoodId],[Quantity],[UnitId],[Description] from @details
	if @@TRANCOUNT>0
	COMMIT;
	if @operationType=11 goto spSelect;
RETURN 0
end
spDelete:
begin
update [Accounting].[Offline]
set
[DeleteId]=@userId,
[DeleteDate]=GETDATE()
where id=@id;



update [Accounting].[OfflineDetail]
set

[DeleteId]=@userId,
[DeleteDate]=GETDATE()
where LogisticId=@id;




if @operationType=13 goto spSelect;
RETURN 0
end

spSelect:
select  
l.[Id]
,l.[Driver]
,l.[Fin]
,l.[Transportation]
,l.[Cart]
,l.[Sender]
,l.[SenderAddress]
,l.[SenderManager]
,l.[Received]
,l.[ReceivedAddress]
,l.[ReceivedManager]
,l.[Date]
,l.[DeliveryDate]
,l.[Description]
,l.CompanyId
,l.CompanyName
,l.WareHouseId
,l.WareHouseName
,l.ContractId
,l.CustomerId
,l.CustomerName
,l.PaymentTypeId
,l.PaymentTypeName
from [Accounting].[VwLogistic] l

join [Accounting].[OfflineDetail] ld on l.id=ld.LogisticId
 group by
 l.[Id]
, l.[Driver]
,l.[Fin]
,l.[Transportation]
,l.[Cart]
,l.[Sender]
,l.[SenderAddress]
,l.[SenderManager]
,l.[Received]
,l.[ReceivedAddress]
,l.[ReceivedManager]
,l.[Date]
,l.[DeliveryDate]
,l.[Description]
,l.CompanyId
,l.CompanyName
,l.WareHouseId
,l.WareHouseName
,l.ContractId
,l.CustomerId
,l.CustomerName
,l.PaymentTypeId
,l.PaymentTypeName
select * from Accounting.VwLogistic ;
RETURN 0
end
GO
PRINT N'Altering [Accounting].[spAccount]...';


GO
ALTER PROCEDURE [Accounting].[spAccount]
@userId int,
@operationType tinyint,
@parentId int=null,
@code varchar(40) =null,
@name nvarchar(200)=null,
@description nvarchar(500)=null,
@isActive bit=null,
@id int=null
with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [Accounting].[Account]([ParentId],[Code],[Name],[Description])
values(@parentId,@code,@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [Accounting].[Account]
set
[ParentId]=@parentId,
[Code]=case when @code is null then [Code] else @code end,
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [Accounting].[Account]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [Accounting].[VwAccount]
RETURN 0
end
GO
PRINT N'Altering [Accounting].[spBankGroup]...';


GO
ALTER PROCEDURE [Accounting].[spBankGroup]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [Accounting].[BankGroup]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [Accounting].[BankGroup]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [Accounting].[BankGroup]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [Accounting].[VwBankGroup]
RETURN 0
end
GO
PRINT N'Altering [Accounting].[spContractType]...';


GO
ALTER PROCEDURE [Accounting].[spContractType]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [Accounting].[ContractType]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [Accounting].[ContractType]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [Accounting].[ContractType]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [Accounting].[VwContractType]
RETURN 0
end
GO
PRINT N'Altering [Accounting].[spCustomerContract]...';


GO
ALTER PROCEDURE [Accounting].[spCustomerContract]
@userId int,
@operationType tinyint,
@id int=null,
@customerName NVARCHAR(200) =NULL, 
@customerLeader NVARCHAR(200) =NULL, 
@workTypeId INT =NULL, 
@voen NVARCHAR(50) =NULL, 
@currencyId INT =NULL, 
@bankId INT =NULL, 
@bankSwift NVARCHAR(200) =NULL, 
@regionId int =null,
@legalAddress NVARCHAR(200) =NULL, 
@actualAddress NVARCHAR(200) =NULL, 
@email NVARCHAR(200) =NULL, 
@tel NVARCHAR(200) =NULL, 
@date datetime =NULL,
@description nvarchar(500) =NULL,
@parentId int =null,
@typeId INT =NULL,
@docTypeId int =null,
@docCertId int =null,
@docSeriesId int=null,

@contract [Accounting].[UddtContractCustomer] readonly

with encryption
AS 
begin
set xact_abort on;
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;

spAdd:
begin
begin transaction
insert into [Accounting].[Customer]([CustomerName],[ParentId],[TypeId] ,[CustomerLeader],[WorkTypeId],[Voen] ,[CurrencyId] ,[BankId],[BankSwift]  ,[RegionId],[LegalAddress],[ActualAddress],[Email] ,[Tel],[Date],[Description],[CreateId],[DocTypeId],[DocCertId],[DocSeriesId])
values(@customerName,@parentId,@typeId,@customerLeader,@workTypeId,@voen,@currencyId,@bankId,@bankSwift,@regionId,@legalAddress,@actualAddress,@email,@tel,@date,@description,@userId,@docTypeId,@docCertId,@docSeriesId);

set @id=SCOPE_IDENTITY();

insert into [Accounting].[Contract]([CustomerId],[ContractDate],[CurrencyId],[OperationTypeId],[CompanyId],[ContractTypeId],[Description])
select @id,[ContractDate],[CurrencyId],[OperationTypeId] ,[CompanyId] ,[ContractTypeId],[Description] from @contract

if @@TRANCOUNT>0
   commit;


if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
begin transaction

UPDATE [Accounting].[Customer]
   SET
       
	   [CustomerName] = @customerName
	   ,[ParentId]=@parentId
	   ,[TypeId]=@typeId
      ,[CustomerLeader] = @customerLeader
      ,[WorkTypeId] = @WorkTypeId 
      ,[Voen] = @Voen
      ,[CurrencyId] = @CurrencyId
      ,[BankId] = @bankId
	  ,[BankSwift]=@bankSwift
	  ,[RegionId]=@regionId
      ,[LegalAddress] = @LegalAddress
      ,[ActualAddress] = @ActualAddress
      ,[Email] = @Email
      ,[Tel] = @Tel
      ,[Date] = @Date
      ,[Description] = @Description
      ,[UpdateId]=@userId
      ,[UpdateDate]= getdate()
      ,[DocTypeId]=@docTypeId
      ,[DocSeriesId]=@docSeriesId
      ,[DocCertId]=@docCertId

where Id=@id;

merge [Accounting].[Contract] target
using(select [Id],@id [CustomerId],[ContractDate],[ContractTypeId],[CurrencyId],[OperationTypeId],[CompanyId],[Description] 
from @contract) source on target.Id=source.Id
when MATCHED and target.CustomerId=@id THEN 
update 
set [CustomerId]=source.[CustomerId],[ContractDate]=source.[ContractDate],[ContractTypeId]=source.[ContractTypeId],[CurrencyId]=source.[CurrencyId],[OperationTypeId]=source.[OperationTypeId]
,[CompanyId]=source.[CompanyId],[Description]=source.[Description]
when NOT MATCHED BY target then 
insert ([CustomerId] ,[ContractDate] ,[ContractTypeId] ,[CurrencyId] ,[OperationTypeId]  ,[CompanyId],[Description])
values(@id ,[ContractDate],[ContractTypeId],[CurrencyId],[OperationTypeId],[CompanyId],[Description])
when NOT MATCHED BY source and target.CustomerId=@Id  then update set [DeleteId]=@userId,[DeleteDate]=getdate();

if @@TRANCOUNT>0
   commit;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [Accounting].[Customer]
set
[DeleteId]=@userId,
[DeleteDate]=GETDATE()
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end



spSelect:
select c.[Id]
      ,c.[CustomerName] 
	  ,c.[ParentId]
	  ,c.TypeId
	  ,c.TypeName
      ,c.[CustomerLeader]
      ,c.[Voen]
      ,c.[CurrencyId]
      ,c.[WorkTypeId]
      ,c.[WorkTypeName]
      ,c.[BankId]
	  ,c.[BankName]
	  ,c.[BankSwift]
	  ,c.[RegionId]
	  ,c.[RegionName]
      ,c.[LegalAddress]
      ,c.[ActualAddress]
      ,c.[Email]
      ,c.[Tel]
      ,c.[Date]
      ,c.[Description]
from [Accounting].[VwCustomer] c
join [Accounting].[Contract] co on c.id=co.CustomerId
group by 
       c.[Id]
      ,c.[CustomerName] 
	  ,c.[ParentId]
	  ,c.TypeId,c.TypeName
      ,c.[CustomerLeader]
      ,c.[Voen]
      ,c.[CurrencyId]
      ,c.[WorkTypeId]
      ,c.[WorkTypeName]
      ,c.[BankId]
	  ,c.[BankName]
	  ,c.[BankSwift]
	  ,c.[RegionId]
	  ,c.[RegionName]
      ,c.[LegalAddress]
      ,c.[ActualAddress]
      ,c.[Email]
      ,c.[Tel]
      ,c.[Date]
      ,c.[Description]
   select * from [Accounting].[VwCustomer] ;
RETURN 0
end
GO
PRINT N'Altering [Accounting].[spDocumentRetailReturn]...';


GO
ALTER PROCEDURE [Accounting].[spDocumentRetailReturn]


@userId int ,
@menuId INT,
	@operationType tinyint = null,
	@id INT = NULL,
	@includeDate DATETIME=NULL,
	@companyId INT=NULL,
	@wareHouseId INT=NULL,
	@description nvarchar(500)=NULL,
	@paymentTypeId int=null,
	@contractId int =null,
	@customerId int=null,
	@accountId int=null,
	@paymentid INT=NULL,
	@paymentDate datetime =null, 
    @partnerOrderNo nvarchar(200)=null,
    @mainNumber int =null,
    
	@detail [Accounting].[UddtRetailSaleGoodReturn] readonly
	

with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
--else if @operationType in (2,12)
--goto spedit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
begin tran 

if exists(select * from @detail d
join Accounting.VwGoodStock st with(rowlock,holdlock) on d.GoodId=st.Id
WHERE ISNULL(st.Quantity,0) + d.Quantity<0 AND st.WarehouseId=@wareHouseId)
begin
raiserror('Say duzgun deyil',16,1)
rollback
return
end
else 
BEGIN

INSERT INTO [Accounting].[Document]( [IncludeDate],[CompanyId],[WareHouseId],[Description],[PaymentTypeId],[ContractId],[AccountId],[PaymentDate],[PartnerOrderNo],[MainNumber])
VALUES (@includeDate,@companyId,@wareHouseId,@description,@paymentTypeId,@contractId,@accountId,@paymentDate,@partnerOrderNo,@mainNumber)

SET @id=SCOPE_IDENTITY();

DECLARE @totalAmount DECIMAL(26,6)=0,@payment DECIMAL(26,6),@amountretail DECIMAL(26,6),@goodId INT,@barcodeId INT,@series nvarchar(200),@dateOfProduction datetime,@lastExpirationDate DATETIME
,@quantity DECIMAL(26,6),@unitId INT,@priceBuy DECIMAL(26,6),@priceRetail DECIMAL(26,6),@priceWholeSale DECIMAL(26,6)

DECLARE crs CURSOR FOR 
(SELECT AccountId,ISNULL(Payment,0),[AmountRetail],[GoodId],[BarCodeId],[Series],[DateOfProduction],[LastExpirationDate],
[Quantity],[UnitId],[PriceBuy],[PriceRetail],[PriceWholeSale]
FROM @detail)
OPEN crs
FETCH NEXT FROM crs INTO @accountId ,@payment ,@amountretail ,@goodId,@barcodeId,@series ,@dateOfProduction ,@lastExpirationDate 
,@quantity,@unitId,@priceBuy,@priceRetail,@priceWholeSale

WHILE @@FETCH_STATUS=0
BEGIN

SET @totalAmount=@totalAmount+@amountretail
DECLARE @element INT=0
SELECT @element=Id FROM DocumentDetail WHERE GoodId=@goodId AND (SELECT SUM(Quantity) FROM DocumentDetail WHERE GoodId=@goodId AND AccountId=8)>=@quantity 
IF(@element>0)
BEGIN

--INSERT INTO Accounting.Payment (AccountId,CustomerId,PaymentTypeId,Payment,Deficit) 
--VALUES(@accountId,@customerId,isnull(@paymentTypeId,1),@payment,@amountretail)


INSERT INTO [Accounting].[DocumentDetail]([DocumentId],[PaymentId],[AccountId],[GoodId],[BarCodeId],[Series],[DateOfProduction],[LastExpirationDate],[Quantity],[UnitId],[PriceBuy],[PriceRetail],[PriceWholeSale],[AmountBuy], [AmountRetail],[AmountWholeSale],[Payment],[Deficit],[CreateId],[CreateDate])
values(@id,@paymentid,@accountId, @goodId,@barcodeId,@series,@dateOfProduction,@lastExpirationDate,@quantity,@unitId,@priceBuy,@priceRetail,@priceWholeSale,@quantity*@priceBuy,@quantity*@priceRetail,@quantity*@priceWholeSale,@payment, @amountretail,@userId,GETDATE())


--INSERT INTO [Accounting].[Stock]( [GoodId],[Quantity],[PriceBuy],[PrcieRetail],[PriceWholeSale],[CreateDate]) 
--values (@goodId,@quantity,@priceBuy,@priceRetail,@priceWholeSale,getdate())

UPDATE Accounting.Stock
SET
Quantity=Quantity+@quantity
WHERE Id=(select max(s.Id) from Accounting.Stock s where s.GoodId=@goodId and s.WarehouseId=@wareHouseId AND s.UpdateId IS null)

end
else
begin
raiserror('Say duzgun deyil',16,1)
rollback
return
end
--update st set st.Quantity=st.Quantity+d.Quantity
--from @detail d 
--join Accounting.Stock st with(rowlock,holdlock) on d.GoodId=st.GoodId WHERE d.GoodId=@goodId AND st.Id=(select max(Id)  from Accounting.Stock where GoodId=@goodId );

FETCH NEXT FROM crs INTO @accountId ,@payment ,@amountretail ,@goodId,@barcodeId,@series ,@dateOfProduction ,@lastExpirationDate,@quantity,@unitId,@priceBuy,@priceRetail,@priceWholeSale


end

close crs
deallocate crs
INSERT INTO Accounting.Payment (DocumentId,AccountId,CustomerId,PaymentTypeId,Payment,Deficit) 
VALUES(@id,@accountId,@customerId,isnull(@paymentTypeId,1),@payment,@totalAmount)
SET @paymentid=SCOPE_IDENTITY();
END

if @@TRANCOUNT>0 
commit;


if @operationType=11 goto spSelect;
RETURN 0
end

 
spDelete:
BEGIN

DECLARE @totalAmount1 DECIMAL(26,6)=0,@payment1 DECIMAL(26,6),@amountBuy1 DECIMAL(26,6),@goodId1 INT,@barcodeId1 INT,@series1 NVARCHAR(200),@dateOfProduction1 DATETIME,@lastExpirationDate1 DATETIME
,@quantity1 DECIMAL(26,6),@unitId1 INT,@priceBuy1 DECIMAL(26,6),@priceRetail1 DECIMAL(26,6),@priceWholeSale1 DECIMAL(26,6)

DECLARE crs CURSOR FOR 
(SELECT ISNULL(Payment,0),[AmountBuy],[GoodId],[BarCodeId],[Series],[DateOfProduction],[LastExpirationDate],
[Quantity],[UnitId],[PriceBuy],[PriceRetail],[PriceWholeSale]
FROM Accounting.VwDocumentDetail WHERE DocumentId=@id)
OPEN crs
FETCH NEXT FROM crs INTO @payment1 ,@amountBuy1 ,@goodId1,@barcodeId1,@series1 ,@dateOfProduction1 ,@lastExpirationDate1 
,@quantity1,@unitId1,@priceBuy1,@priceRetail1,@priceWholeSale1

WHILE @@FETCH_STATUS=0
BEGIN
SET @totalAmount1=@totalAmount1+@amountBuy1


declare @g int,@q decimal(25,5),@sId int,@deficitQuantity decimal(25,5)=0

DECLARE css CURSOR FOR 
(SELECT s.Id,s.GoodId,s.Quantity
FROM Accounting.Stock s WHERE s.Quantity>0 AND s.GoodId=@goodId1 AND s.WarehouseId=@wareHouseId AND s.UpdateId IS null)
OPEN css
FETCH NEXT FROM css INTO @sId,@g,@q

WHILE @@FETCH_STATUS=0
BEGIN
if(@deficitQuantity IS NOT null)
begin
if(@quantity1>@q AND @deficitQuantity=0)
begin
SET @deficitQuantity=@quantity1-@q
UPDATE Accounting.Stock
SET
    Quantity = 0
	where Id=@sId AND GoodId=@goodId1 
end

if(@quantity1>@q AND @deficitQuantity>@q)
begin
SET @deficitQuantity=@deficitQuantity-@q
UPDATE Accounting.Stock
SET
    Quantity = 0
	where Id=@sId AND GoodId=@goodId1
END

if(@quantity1>@q AND @deficitQuantity<=@q)
BEGIN
UPDATE Accounting.Stock
SET
    Quantity = @q-@deficitQuantity
	where Id=@sId AND GoodId=@goodId1
SET @deficitQuantity=null
END

ELSE
begin
UPDATE Accounting.Stock
SET
    Quantity = @q-@quantity1
	where Id=@sId AND GoodId=@goodId1
	SET @deficitQuantity=null
END

end
FETCH NEXT FROM css INTO @sId,@g,@q

end

close css
deallocate css


FETCH NEXT FROM crs INTO @payment1 ,@amountBuy1 ,@goodId1,@barcodeId1,@series1 ,@dateOfProduction1 ,@lastExpirationDate1,@quantity1,@unitId1,@priceBuy1,@priceRetail1,@priceWholeSale1


END

CLOSE crs
DEALLOCATE crs


DELETE FROM Accounting.Payment 
WHERE DocumentId=@id

UPDATE Accounting.DocumentDetail
SET
DeleteDate=GETDATE(),
DeleteId=@userId
WHERE DocumentId=@id

update [Accounting].[Document]
set

[DeleteId]=@userId,
[DeleteDate]=GETDATE()
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end
spSelect:
select  
     d.[Id]  
    ,d.[IncludeDate]  
    ,d.[CompanyId]   
	,d.[CompanyName]  
    ,d.[WareHouseId] 
	,d.[WareHouseName]
	,d.[Description]
	,d.[PaymentTypeId]
	,d.[PaymentTypeName]
	,d.[ContractId]
	,d.[CustomerId]
	,d.[CustomerName]
	,d.[PaymentDate]   
    ,d.[PartnerOrderNo]
    ,d.[MainNumber]

         ,max(dd.AmountBuy) AmountBuy
         ,max(dd.AmountRetail) AmountRetail
         ,max(dd.AmountWholeSale) AmountWholeSale
		 ,max(dd.PriceWholeSale) PriceWholeSale
	     ,max(dd.Payment) Payment
	     ,max(dd.Deficit) Deficit
from [Accounting].[VwDocument] d
 left join [Accounting].[DocumentDetail] dd on d.Id=dd.DocumentId
 left join [Accounting].[VwContract] c on c.id=d.ContractId
 JOIN dbo.WarehouseMenuCollection wmc ON wmc.WareHouseId = d.WareHouseId and wmc.UserId=@userId AND wmc.Allow=1 AND wmc.MenuId=@menuId
 where d.DeleteId is NULL AND AccountId=4
 group by 
     
	 d.[Id]  
    ,d.[IncludeDate]  
    ,d.[CompanyId]   
	,d.[CompanyName]  
    ,d.[WareHouseId] 
	,d.[WareHouseName]
	,d.[Description]
	,d.[PaymentTypeId]
	,d.[PaymentTypeName]
	,d.[ContractId]
	,d.[CustomerId]
	,d.[CustomerName]
	,d.[PaymentDate]   
    ,d.[PartnerOrderNo]
    ,d.[MainNumber]

	;
 RETURN 0
end
GO
PRINT N'Altering [Accounting].[spDocumentSaleReturn]...';


GO
ALTER PROCEDURE [Accounting].[spDocumentSaleReturn]


@userId int ,
	@operationType tinyint = null,
	@id INT = NULL,
	@includeDate DATETIME=NULL,
	@menuId INT,
	@companyId INT=NULL,
	@wareHouseId INT=NULL,
		@description nvarchar(500)=null,
	@paymentTypeId int=null,
	@contractId int =null,
	@customerId int=null,
	@paymentid INT=NULL,
	@accountId int=null,
		 @paymentDate datetime=null,
	 @partnerOrderNo nvarchar(200)=null,
	 @mainNumber   int=null,
    
	@detail [Accounting].[UddtSaleGoodReturn] readonly
	

with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
--else if @operationType in (2,12)
--goto spedit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
begin tran 

if exists(select * from @detail d
join Accounting.VwGoodStock st with(rowlock,holdlock) on d.GoodId=st.Id
where ISNULL(st.quantity,0) + d.Quantity<0  AND st.WarehouseId=@wareHouseId)
begin
raiserror('Say duzgun deyil',16,1)
rollback
return
end
else 
begin


INSERT INTO [Accounting].[Document]( [IncludeDate],[CompanyId],[WareHouseId],[Description],[PaymentTypeId],[ContractId],[AccountId],[PaymentDate],[PartnerOrderNo],[MainNumber])
VALUES (@includeDate,@companyId,@wareHouseId,@description,@paymentTypeId,@contractId,@accountId,@paymentDate,@partnerOrderNo,@mainNumber)

SET @id=SCOPE_IDENTITY();

DECLARE @payment DECIMAL(26,6),@amountWholeSale DECIMAL(26,6),@goodId INT,@barcodeId INT,@series nvarchar(200),@dateOfProduction datetime,@lastExpirationDate DATETIME
,@quantity DECIMAL(26,6),@unitId INT,@priceBuy DECIMAL(26,6),@priceRetail DECIMAL(26,6),@priceWholeSale DECIMAL(26,6)
--declare sss cursor for
--(select GoodId,Quantity from Accounting.Stock)
--open sss
--fetch next from sss into @stockgoodId,@stockquantity
--while @@FETCH_STATUS=0
--begin
DECLARE crs CURSOR FOR 
(SELECT AccountId,ISNULL(Payment,0),[AmountWholeSale],[GoodId],[BarCodeId],[Series],[DateOfProduction],[LastExpirationDate],
[Quantity],[UnitId],[PriceBuy],[PriceRetail],[PriceWholeSale]
FROM @detail)
OPEN crs
FETCH NEXT FROM crs INTO @accountId ,@payment ,@amountWholeSale ,@goodId,@barcodeId,@series ,@dateOfProduction ,@lastExpirationDate 
,@quantity,@unitId,@priceBuy,@priceRetail,@priceWholeSale

WHILE @@FETCH_STATUS=0
BEGIN


DECLARE @element INT=0
SELECT @element=Id FROM DocumentDetail WHERE GoodId=@goodId AND (SELECT SUM(Quantity) FROM DocumentDetail WHERE GoodId=@goodId AND AccountId=7)>=@quantity 
IF(@element>0)
begin


--INSERT INTO Accounting.Payment (AccountId,CustomerId,PaymentTypeId,Payment,Deficit) 
--VALUES(@accountId,@customerId,isnull(@paymentTypeId,1),@payment,@amountWholeSale)
--SET @paymentid=SCOPE_IDENTITY();

UPDATE Accounting.Stock
SET
Quantity=Quantity+@quantity
WHERE GoodId=@goodId and Id=(select max(s.Id) from Accounting.Stock s where s.GoodId=@goodId  AND s.WarehouseId=@wareHouseId AND UpdateId IS null)

INSERT INTO [Accounting].[DocumentDetail]([DocumentId],[PaymentId],[AccountId],[GoodId],[BarCodeId],[Series],[DateOfProduction],[LastExpirationDate],[Quantity],[UnitId],[PriceBuy],[PriceRetail],[PriceWholeSale],[AmountBuy], [AmountRetail],[AmountWholeSale],[Payment],[Deficit],CreateId,CreateDate)
values(@id,@paymentid,@accountId, @goodId,@barcodeId,@series,@dateOfProduction,@lastExpirationDate,@quantity,@unitId,@priceBuy,@priceRetail,@priceWholeSale,@quantity*@priceBuy,@quantity*@priceRetail,@quantity*@priceWholeSale,@payment, @amountWholeSale,@userId,GETDATE())
end
else
begin
raiserror('Say duzgun deyil',16,1)
rollback
return
end

--UPDATE st set st.Quantity=st.Quantity+d.Quantity
--from @detail d join Accounting.Stock st with(rowlock,holdlock) on d.GoodId=st.GoodId where d.GoodId=@goodId


FETCH NEXT FROM crs INTO @accountId ,@payment ,@amountWholeSale ,@goodId,@barcodeId,@series ,@dateOfProduction ,@lastExpirationDate,@quantity,@unitId,@priceBuy,@priceRetail,@priceWholeSale
end

close crs
deallocate crs
end

INSERT INTO Accounting.Payment (DocumentId,AccountId,CustomerId,PaymentTypeId,Payment,Deficit) 
VALUES(@id,@accountId,@customerId,isnull(@paymentTypeId,1),@payment,@amountWholeSale)
SET @paymentid=SCOPE_IDENTITY();

if @@TRANCOUNT>0 
commit;


if @operationType=11 goto spSelect;
RETURN 0
end

--spEdit:
--begin
--update [Accounting].[Document]
--set

--[IncludeDate]=@includeDate,
--[CompanyId]=@companyId,
--[WareHouseId]=@wareHouseId,
--[Description]=@description,
--[PaymentTypeId]=@paymentTypeId,
--[ContractId]=@contractId,
--[AccountId]=@accountId

--where Id=@id;


----------------  Stock -------------

--;with chck as (
--select d.GoodId,sum(d.Quantity-isnull(dd.Quantity,0)) Quantity from @detail d 
--left join [Accounting].[DocumentDetail] dd on d.Id=dd.Id
--group by d.GoodId
--)


--merge [Accounting].[Stock] target
--using (select [GoodId] ,Quantity  from chck)source  on target.GoodId=source.GoodId
--when Matched then
--update set [Quantity]=target.Quantity+source.[Quantity] 
--when not matched by target then insert ([GoodId],[Quantity]) values(source.GoodId,source.Quantity);


--merge [Accounting].[DocumentDetail] target
--using (select [Id],[GoodId],@id [DocumentId],[AccountId],[BarCodeId],[Series],[DateOfProduction]
--,[LastExpirationDate],[Quantity],[UnitId],[PriceBuy],[PriceRetail],[PriceWholeSale]
--,[Quantity]*[PriceBuy] [AmountBuy],[Quantity]*[PriceRetail] [AmountRetail]
--,[Quantity]*[PriceWholeSale] [AmountWholeSale],[Payment],[AmountWholeSale] - [Payment] [Deficit]
--from @detail) source on target.Id=source.Id
--when MATCHED and target.DocumentId=@id THEN 


--update set [AccountId]=source.[AccountId],[BarCodeId]=source.[BarCodeId],[Series]=source.[Series]
--,[DateOfProduction]=source.[DateOfProduction],[LastExpirationDate]=source.[LastExpirationDate]
--,[Quantity]=source.[Quantity],[UnitId]=source.[UnitId],[PriceBuy]=source.[PriceBuy]
--,[PriceRetail]=source.[PriceRetail],[PriceWholeSale]=source.[PriceWholeSale]
--,[AmountBuy]=source.[AmountBuy],[AmountRetail]=source.[AmountRetail]
--,[AmountWholeSale]=source.[AmountWholeSale],[Payment]=source.[Payment]
--,[Deficit]=source.[AmountWholeSale]-(isnull(target.[Payment],0)
----+source.[Payment]
--)


--when NOT MATCHED BY target then 
--insert  ( [DocumentId] ,[AccountId],[GoodId],[BarCodeId],[Series],[DateOfProduction]
--,[LastExpirationDate],[Quantity],[UnitId],[PriceBuy],[PriceRetail],[PriceWholeSale],[AmountBuy]
--,[AmountRetail],[AmountWholeSale],[Payment],[Deficit])
--values (@id,[AccountId],[GoodId],[BarCodeId],[Series],[DateOfProduction],[LastExpirationDate]
--,[Quantity],[UnitId],[PriceBuy],[PriceRetail],[PriceWholeSale],[Quantity]*[PriceBuy]
--, [Quantity] * [PriceRetail] ,[Quantity]*[PriceWholeSale] ,[Payment],[AmountWholeSale]-[Payment] )

--when NOT MATCHED BY source and target.DocumentId=@Id then update set [DeleteId]=@userId
--,[DeleteDate]=getdate();

--if @@TRANCOUNT>0
--   commit;
--if @operationType=12 goto spSelect;
--RETURN 0
--end

spDelete:
BEGIN

DECLARE @totalAmount1 DECIMAL(26,6)=0,@payment1 DECIMAL(26,6),@amountBuy1 DECIMAL(26,6),@goodId1 INT,@barcodeId1 INT,@series1 NVARCHAR(200),@dateOfProduction1 DATETIME,@lastExpirationDate1 DATETIME
,@quantity1 DECIMAL(26,6),@unitId1 INT,@priceBuy1 DECIMAL(26,6),@priceRetail1 DECIMAL(26,6),@priceWholeSale1 DECIMAL(26,6)

DECLARE crs CURSOR FOR 
(SELECT ISNULL(Payment,0),[AmountBuy],[GoodId],[BarCodeId],[Series],[DateOfProduction],[LastExpirationDate],
[Quantity],[UnitId],[PriceBuy],[PriceRetail],[PriceWholeSale]
FROM Accounting.VwDocumentDetail WHERE DocumentId=@id)
OPEN crs
FETCH NEXT FROM crs INTO @payment1 ,@amountBuy1 ,@goodId1,@barcodeId1,@series1 ,@dateOfProduction1 ,@lastExpirationDate1 
,@quantity1,@unitId1,@priceBuy1,@priceRetail1,@priceWholeSale1

WHILE @@FETCH_STATUS=0
BEGIN
SET @totalAmount1=@totalAmount1+@amountBuy1


declare @g int,@q decimal(25,5),@sId int,@deficitQuantity decimal(25,5)=0

DECLARE css CURSOR FOR 
(SELECT s.Id,s.GoodId,s.Quantity
FROM Accounting.Stock s WHERE s.Quantity>0 AND s.GoodId=@goodId1  AND s.WarehouseId=@wareHouseId AND s.UpdateId IS null)
OPEN css
FETCH NEXT FROM css INTO @sId,@g,@q

WHILE @@FETCH_STATUS=0
BEGIN
if(@deficitQuantity IS NOT null)
begin
if(@quantity1>@q AND @deficitQuantity=0)
begin
SET @deficitQuantity=@quantity1-@q
UPDATE Accounting.Stock
SET
    Quantity = 0
	where Id=@sId AND GoodId=@goodId1
end

if(@quantity1>@q AND @deficitQuantity>@q)
begin
SET @deficitQuantity=@deficitQuantity-@q
UPDATE Accounting.Stock
SET
    Quantity = 0
	where Id=@sId AND GoodId=@goodId1
END

if(@quantity1>@q AND @deficitQuantity<=@q)
BEGIN
UPDATE Accounting.Stock
SET
    Quantity = @q-@deficitQuantity
	where Id=@sId AND GoodId=@goodId1
SET @deficitQuantity=null
END

ELSE
begin
UPDATE Accounting.Stock
SET
    Quantity = @q-@quantity1
	where Id=@sId AND GoodId=@goodId1
	SET @deficitQuantity=null
END

end
FETCH NEXT FROM css INTO @sId,@g,@q

end

close css
deallocate css


FETCH NEXT FROM crs INTO @payment1 ,@amountBuy1 ,@goodId1,@barcodeId1,@series1 ,@dateOfProduction1 ,@lastExpirationDate1,@quantity1,@unitId1,@priceBuy1,@priceRetail1,@priceWholeSale1


END

CLOSE crs
DEALLOCATE crs

DELETE FROM Accounting.Payment WHERE DocumentId=@id


UPDATE Accounting.DocumentDetail
SET
DeleteDate=GETDATE(),
DeleteId=@userId
WHERE DocumentId=@id


update [Accounting].[Document]
set

[DeleteId]=@userId,
[DeleteDate]=GETDATE()
where Id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end
spSelect:
select  d.[Id]  
    ,d.[IncludeDate]  
    ,d.[CompanyId]   
	,d.[CompanyName]  
    ,d.[WareHouseId] 
	,d.[WareHouseName]
	,d.[Description]
	,d.[PaymentTypeId]
	,d.[PaymentTypeName]
	,d.[ContractId]
	,d.[CustomerId]
	,d.[CustomerName]
	,d.[PaymentDate]
	,d.[PartnerOrderNo]
	,d.[MainNumber]
     
         ,max(dd.AmountBuy) AmountBuy
         ,max(dd.AmountRetail) AmountRetail
         ,max(dd.AmountWholeSale) AmountWholeSale
		 ,max(dd.PriceWholeSale) PriceWholeSale
	     ,max(dd.Payment) Payment
	     ,max(dd.Deficit) Deficit
from [Accounting].[VwDocument] d
 left join [Accounting].[DocumentDetail] dd on d.Id=dd.DocumentId
 left join [Accounting].[VwContract] c on c.id=d.ContractId
 JOIN dbo.WarehouseMenuCollection wmc ON wmc.WareHouseId = d.WareHouseId and wmc.UserId=@userId AND wmc.Allow=1 AND wmc.MenuId=@menuId
 WHERE AccountId=5 and d.DeleteId is null
 --where c.ContractTypeId=7--satiw ucun
 group by 
     d.[Id]  
    ,d.[IncludeDate]  
    ,d.[CompanyId]   
	,d.[CompanyName]  
    ,d.[WareHouseId] 
	,d.[WareHouseName]
	,d.[Description]
	,d.[PaymentTypeId]
	,d.[PaymentTypeName]
	,d.[ContractId]
	,d.[CustomerId]
	,d.[CustomerName]
		,d.[PaymentDate]
	,d.[PartnerOrderNo]
	,d.[MainNumber];
 RETURN 0
end
GO
PRINT N'Altering [Accounting].[spGood]...';


GO
ALTER procedure [Accounting].[spGood]
@operationType tinyint=null,
@userId int,
@id int =null,
@barcodeId bigint=null,
@documentDetailId int=null,
@goodName nvarchar(200)= null,
@goodTypeId int = null,
@regionId int =null,
@manufacturerCompanyId int =null,
@unitId int=null,
@doseId int=null,
@packingTypeId int=null,
@description nvarchar(500)=null,
@goodCode nvarchar(200)=null,

  @photo varbinary(max)=null,
@docTypeId int =null,
@docCertId int =null,
@docSeriesId int=null,
@isFiltered bit=1,
@detail [Accounting].[UddtBarcodeGood] readonly,
@images [Accounting].[UdttImagesGood] readonly
with encryption
as
begin 
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in(3,13)
goto spDelete;
else if @operationType=4
goto spSelect;

spAdd:
begin 
begin transaction
insert into  [Accounting].[Good]([BarcodeId],[GoodName],[DocumentDetailId],[GoodTypeId],[ManufacturerCompanyId],[RegionId],[UnitId],[DoseId],[PackingTypeId],[Description],[GoodCode],[Photo],[CreateId],[DocTypeId],[DocCertId],[DocSeriesId])
VALUES (@barcodeId,@goodName,@documentDetailId,@goodTypeId,@manufacturerCompanyId,@regionId,@unitId,@doseId,@packingTypeId,@description,@goodCode,@Photo,@userId,@docTypeId,@docCertId,@docSeriesId);

set @id=SCOPE_IDENTITY();

DECLARE @barcode NVARCHAR(20),@barId int

SELECT @barcode=Barcode FROM @detail

INSERT into [Accounting].[Barcode]([GoodId],[Barcode])
SELECT @id,Barcode
from @detail
 
SELECT @barId= Id FROM Barcode WHERE GoodId=@id AND Barcode=@barcode
UPDATE  Accounting.Good
SET 
BarcodeId=@barId
WHERE Id=@id

insert into [Accounting].[ImagesGood]([GoodId],[IsMain],[Image])
select @id,[IsMain],[Image]  
from @images


if @@TRANCOUNT>0
commit;

if @operationType=11 goto spSelect;
return 0
end
spEdit:
begin
begin transaction

update [Accounting].[Good]
set
[GoodName]=@goodName
,[DocumentDetailId]=@documentDetailId
,[GoodTypeId]=@goodTypeId
,[RegionId]=@regionId
,[ManufacturerCompanyId]=@manufacturerCompanyId
,[UnitId]=@unitId
,[DoseId]=@doseId
,[PackingTypeId]=@packingTypeId
,[Description]=@description
,[GoodCode]=@goodCode
 , [Photo]=@photo
,[DocTypeId]=@docTypeId
,[DocCertId]=@docCertId
,[DocSeriesId]=@docSeriesId
,[ModifyId]=@userId
,[ModifyDate]=GETDATE()

WHERE id=@id

merge [Accounting].[Barcode] target
using (select [Id],[Barcode],@id [GoodId] 
from @detail ) source on target.Id=source.Id
when MATCHED and target.GoodId=@id THEN UPDATE SET  [GoodId]=source.[GoodId],[Barcode]=source.[Barcode]
when NOT MATCHED BY target then insert (GoodId,Barcode)
values (@id,[Barcode])
when not matched  by source and  target.GoodId=@Id then update set  [DeleteId]=@userId,[DeleteDate]=getdate();

if @@TRANCOUNT>0
commit;

if @operationType=12 goto spSelect;
return 0
end

spDelete:
begin 
update Accounting.Barcode
set [DeleteId]=@userId,
[DeleteDate]=GETDATE()
where id=@id;

update Accounting.ImagesGood
set [DeleteId]=@userId,
[DeleteDate]=GETDATE()
where id=@id;


update [Accounting].[Good]
set [DeleteId]=@userId,
[DeleteDate]=GETDATE()
where id=@id;

if @operationType=13 goto spSelect
return 0
end
spSelect:

select  
g.[Id]
,B.[Id] BarcodeId
,b.Barcode
,g.[GoodName]
,g.[FullGoodName]
,g.[DocumentDetailId]
,g.[GoodTypeId]
,g.[GoodTypeName]
,g.[RegionId]
,g.[RegionName]
,g.[ManufacturerCompanyId]
,g.[ManufacturerCompanyName]
,g.[UnitId]
,g.[UnitName]
,g.[DoseId]
,g.[DoseName]
,g.[PackingTypeId]
,g.[PackingTypeName]
,g.[Description]
,g.[GoodCode]
,g.[Photo]
      ,g.[CreateId]
      ,g.[CreateDate]
      ,g.[DocTypeId]
      ,g.[DocCertId]
      ,g.[DocSeriesId]

from [Accounting].[VwGood] g

left join [Accounting].[Barcode] B ON G.Id=b.GoodId
left join [Accounting].[ImagesGood]  ig on g.Id=ig.GoodId
group by 
g.[Id]

,b.[Id] 
,b.Barcode
,g.[GoodName]
,g.[FullGoodName]
,g.[DocumentDetailId]
,g.[GoodTypeId]
,g.[GoodTypeName]
,g.[RegionId]
,g.[RegionName]
,g.[ManufacturerCompanyId]
,g.[ManufacturerCompanyName]
,g.[UnitId]
,g.[UnitName]
,g.[DoseId]
,g.[DoseName]
,g.[PackingTypeId]
,g.[PackingTypeName]
,g.[Description]
,g.[GoodCode]
,g.[Photo]
      ,g.[CreateId]
      ,g.[CreateDate]
      ,g.[DocTypeId]
      ,g.[DocCertId]
      ,g.[DocSeriesId]
return 0 
end
GO
PRINT N'Altering [Accounting].[spGoodType]...';


GO
ALTER PROCEDURE [Accounting].[spGoodType]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [Accounting].[GoodType]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [Accounting].[GoodType]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [Accounting].[GoodType]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [Accounting].[VwGoodType]
RETURN 0
end
GO
PRINT N'Altering [Accounting].[spLogisticDocument]...';


GO
 
ALTER PROCEDURE [Accounting].[spLogisticDocument]
@userId int,
@operationType tinyint,
@id int=null,
@driver nvarchar(200) =null,
@fin nvarchar(200)=null,
@transportation nvarchar(200)=null,
@cart nvarchar(200)=null,
@sender nvarchar(200)=null,
@senderAddress nvarchar(200)=null,
@senderManager nvarchar(200)=null,
@received nvarchar(200)=null,
@receivedAddress nvarchar(200)=null,
@receivedManager nvarchar(200)=null,
@date datetime =null,
@deliveryDate datetime=null,
@description nvarchar(500)=null,
@docTypeId INT =null,
@docCertId int =null,
@docSeriesId int =null,
	@companyId INT=NULL,
	@wareHouseId INT=NULL,
		@paymentTypeId int=null,
	@contractId int =null,
	@customerId int=null,
@details [Accounting].[UddtLogisticDetail]  readonly 


with encryption
AS 
begin
set xact_abort on;
if @operationType in (1,11)
goto spAdd;
--else if @operationType in (2,12)
--goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;

spAdd:
begin
begin transaction
insert into [Accounting].[Logistic]([Driver],[Fin],[Transportation],[Cart],[Sender],[SenderAddress]
,[SenderManager],[Received],[ReceivedAddress],[ReceivedManager],[Date],[DeliveryDate],[Description],[CreateId],[DocTypeId],[DocCertId],[DocSeriesId],[CompanyId],[WareHouseId],[PaymentTypeId],[ContractId])


VALUES (@driver,@fin,@transportation,@cart,@sender,@senderAddress,@senderManager,@received,@receivedAddress,@receivedManager,@date,@deliveryDate
,@description,@userId,@docTypeId,@docCertId,@docSeriesId,@companyId,@wareHouseId,@paymentTypeId,@contractId);

 set @id=SCOPE_IDENTITY();

 insert into [Accounting].[LogisticDetail]([LogisticId],[BarcodeId],[GoodId],[Quantity],[UnitId],[Description])
                                    select @id,[BarcodeId],[GoodId],[Quantity],[UnitId],[Description] from @details
	if @@TRANCOUNT>0
	COMMIT;
	if @operationType=11 goto spSelect;
RETURN 0
end
spDelete:
begin
update [Accounting].[Logistic]
set
[DeleteId]=@userId,
[DeleteDate]=GETDATE()
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end

spSelect:
select  
l.[Id]
,l.[Driver]
,l.[Fin]
,l.[Transportation]
,l.[Cart]
,l.[Sender]
,l.[SenderAddress]
,l.[SenderManager]
,l.[Received]
,l.[ReceivedAddress]
,l.[ReceivedManager]
,l.[Date]
,l.[DeliveryDate]
,l.[Description]
,l.CompanyId
,l.CompanyName
,l.WareHouseId
,l.WareHouseName
,l.ContractId
,l.CustomerId
,l.CustomerName
,l.PaymentTypeId
,l.PaymentTypeName
from [Accounting].[VwLogistic] l

join [Accounting].[LogisticDetail] ld on l.id=ld.LogisticId
 group by
 l.[Id]
, l.[Driver]
,l.[Fin]
,l.[Transportation]
,l.[Cart]
,l.[Sender]
,l.[SenderAddress]
,l.[SenderManager]
,l.[Received]
,l.[ReceivedAddress]
,l.[ReceivedManager]
,l.[Date]
,l.[DeliveryDate]
,l.[Description]
,l.CompanyId
,l.CompanyName
,l.WareHouseId
,l.WareHouseName
,l.ContractId
,l.CustomerId
,l.CustomerName
,l.PaymentTypeId
,l.PaymentTypeName
select * from Accounting.VwLogistic ;
RETURN 0
end
GO
PRINT N'Altering [Accounting].[spReason]...';


GO
ALTER PROCEDURE [Accounting].[spReason]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [Accounting].[Reason]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [Accounting].[Reason]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [Accounting].[Reason]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [Accounting].[VwReason]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spCitizenship]...';


GO
ALTER PROCEDURE [dbo].[spCitizenship]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[Citizenship]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[Citizenship]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[Citizenship]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwCitizenship]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spDose]...';


GO
ALTER PROCEDURE [dbo].[spDose]

@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[Dose]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[Dose]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[Dose]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwDose]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spHolidayType]...';


GO
ALTER PROCEDURE [dbo].[spHolidayType]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[HolidayType]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[HolidayType]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[HolidayType]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwHolidayType]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spPackingType]...';


GO
ALTER PROCEDURE [dbo].[spPackingType]

@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[PackingType]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[PackingType]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[PackingType]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwPackingType]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spPosition]...';


GO
ALTER PROCEDURE [dbo].[spPosition]
	@userId int,
	@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[Position]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[Position]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[Position]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwPosition]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spRegion]...';


GO
ALTER PROCEDURE [dbo].[spRegion]
    @userId int,
    @operationType tinyint,
	@name nvarchar(100)=null,
	@parentId int=null,
	@regionTypeId int=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[Region]([Name],[ParentId],[RegionTypeId],[Description])
values(@name,@parentId,@regionTypeId,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[Region]
set
[Name]=case when @name is null then [Name] else @name end,
[ParentId]=@parentId,
[RegionTypeId]=@regionTypeId,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[Region]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwRegion]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spRegionType]...';


GO
ALTER PROCEDURE [dbo].[spRegionType]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[RegionType]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[RegionType]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[RegionType]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwRegionType]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spUnit]...';


GO
ALTER PROCEDURE [dbo].[spUnit]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[Unit]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[Unit]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[Unit]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwUnit]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spUser1]...';


GO
ALTER PROCEDURE [dbo].[spUser1]
	@userId int, 
	@login nvarchar(100)=null,
	@password nvarchar(128)=null,
	@isActive bit=null,	
	@id int=null
WITH ENCRYPTION
AS
BEGIN

 
  begin
 
spSelect:
select * from [dbo].[User]
     where [Login]=@login  and [Password]=@password
END
END
GO
PRINT N'Altering [dbo].[spWorkGraphic]...';


GO
ALTER PROCEDURE [dbo].[spWorkGraphic]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[WorkGraphic]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[WorkGraphic]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[WorkGraphic]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwWorkGraphic]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spWorkPlace]...';


GO
ALTER PROCEDURE [dbo].[spWorkPlace]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[WorkPlace]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[WorkPlace]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[WorkPlace]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwWorkPlace]
RETURN 0
end
GO
PRINT N'Altering [dbo].[spWorkType]...';


GO
ALTER PROCEDURE [dbo].[spWorkType]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [dbo].[WorkType]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [dbo].[WorkType]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [dbo].[WorkType]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [dbo].[VwWorkType]
RETURN 0
end
GO
PRINT N'Altering [WareHouses].[spWareHouse]...';


GO
ALTER PROCEDURE [WareHouses].[spWareHouse]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@wareHouseTypeId int=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [WareHouses].[WareHouse]([Name],[WareHouseTypeId],[Description])
values(@name,@wareHouseTypeId,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [WareHouses].[WareHouse]
set
[Name]=case when @name is null then [Name] else @name end,
[WareHouseTypeId]= case when @wareHouseTypeId  is null then  [WareHouseTypeId] else  @wareHouseTypeId end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [WareHouses].[WareHouse]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [WareHouses].[VwWareHouse]
RETURN 0
end
GO
PRINT N'Altering [WareHouses].[spWareHouseType]...';


GO
ALTER PROCEDURE [WareHouses].[spWareHouseType]
@userId int,
@operationType tinyint,
	@name nvarchar(100)=null,
	@description nvarchar(500)=null,
	@isActive bit=null,
	@id int=null
	with encryption
AS

begin
if @operationType in (1,11)
goto spAdd;
else if @operationType in (2,12)
goto spEdit;
else if @operationType in (3,13)
goto spDelete;
else if @operationType =4
goto spSelect;


spAdd:
begin
insert into [WareHouses].[WareHouseType]([Name],[Description])
values(@name,@description);

if @operationType=11 goto spSelect;
RETURN 0
end

spEdit:
begin
update [WareHouses].[WareHouseType]
set
[Name]=case when @name is null then [Name] else @name end,
[Description]=@description
where id=@id;

if @operationType=12 goto spSelect;
RETURN 0
end

spDelete:
begin
update [WareHouses].[WareHouseType]
set
[IsActive]=isnull(@isActive,0)
where id=@id;

if @operationType=13 goto spSelect;
RETURN 0
end


spSelect:
   select * from [WareHouses].[WareHouseType] WHERE isnull (IsActive,1)= 1;
RETURN 0
end
GO
PRINT N'Refreshing [Accounting].[spDocumentRetailTmp]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spDocumentRetailTmp]';


GO
PRINT N'Refreshing [dbo].[spGetGood]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetGood]';


GO
PRINT N'Refreshing [dbo].[spGetInvetnarGood]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetInvetnarGood]';


GO
PRINT N'Refreshing [Accounting].[spDocument]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spDocument]';


GO
PRINT N'Refreshing [Accounting].[spDocumentRetailsSale]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spDocumentRetailsSale]';


GO
PRINT N'Refreshing [Accounting].[spDocumentReturnInclude]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spDocumentReturnInclude]';


GO
PRINT N'Refreshing [Accounting].[spDocumentSale]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spDocumentSale]';


GO
PRINT N'Refreshing [Accounting].[spDocumentDeletion]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spDocumentDeletion]';


GO
PRINT N'Refreshing [Accounting].[spIncludeOrder]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spIncludeOrder]';


GO
PRINT N'Refreshing [dbo].[spReportMoney4]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spReportMoney4]';


GO
PRINT N'Refreshing [dbo].[spTransport]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spTransport]';


GO
PRINT N'Refreshing [Accounting].[spDeficitStock]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spDeficitStock]';


GO
PRINT N'Refreshing [Accounting].[spDocumentRetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spDocumentRetail]';


GO
PRINT N'Refreshing [dbo].[spBarcodeSelect]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spBarcodeSelect]';


GO
PRINT N'Refreshing [dbo].[spGetGoodStock]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetGoodStock]';


GO
PRINT N'Refreshing [Accounting].[spRetailPrint]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spRetailPrint]';


GO
PRINT N'Refreshing [Accounting].[spInventar]...';


GO
EXECUTE sp_refreshsqlmodule N'[Accounting].[spInventar]';


GO
--if not exists(select top(1) 0 from sys.sysusers where [name]='kamran')
--begin
--   CREATE USER [kamran] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
--   --ALTER ROLE [db_datareader] ADD MEMBER [kamran]
--   insert into dbo.[User](UserName,[Password],PersonId)
--   values('kamran','08FDD1C83E5BF6F855958488E7443DB9',1)
--end

if not exists(select top(1) 0 from sys.sysusers where [name]='kamran')
begin
   --application roles
   insert into dbo.[Principial]([Name],[IsGroup])
   values('public',1),('Superadmin',1),('Admin',1),('Operator',1),('Reporter',1)



   CREATE USER [kamran] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
   --ALTER ROLE [db_datareader] ADD MEMBER [kamran]
   insert into dbo.[Principial]([Name],[Password],[IsMember],PersonId)
   values('kamran','08FDD1C83E5BF6F855958488E7443DB9',1,1)


   
end

--if not exists(select top(1) 0 from dbo.AppRole)
--begin
--   insert into dbo.[AppRole]([Name])
--   values('Public'),('Super Admin'),('Admin'),('Chiefs'),('Operator'),('Cashier'),('Reporter')
--end

GO

GO
PRINT N'Update complete.';


GO
